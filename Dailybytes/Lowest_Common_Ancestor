/*
Question:
Given a binary search tree that contains unique values and two nodes within the tree, a, and b, return their lowest common ancestor. Note: the lowest 
common ancestor of two nodes is the deepest node within the tree such that both nodes are descendants of it.

Ex: Given the following tree...
       7
      / \
    2    9
   / \ 
  1   5 
and a = 1, b = 9, return a reference to the node containing 7.
Ex: Given the following tree...

        8
       / \
      3   9
     / \ 
    2   6
and a = 2, b = 6, return a reference to the node containing 3.
Ex: Given the following tree...

        8
       / \
      6   9
and a = 6, b = 8, return a reference to the node containing 8.

https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
*/

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root==NULL)
            return NULL;
        if(root==p ||root==q)
            return root;
        TreeNode* l=lowestCommonAncestor(root->left,p,q);
        TreeNode* r=lowestCommonAncestor(root->right,p,q);
        if(l && r)
            return root;
        return (l==NULL)?r:l;
    }
};

/*
--input--
[3,5,1,6,2,0,8,null,null,7,4]
5
1

--output--
3

*/