//#include <iostream>
#include <bits/stdc++.h> 
using namespace std;

class Node{
    public:
    int data;
    Node *right;
    Node *left;
    Node(int d){
        data=d;
        right=NULL;
        left=NULL;
    }
};
vector<int> findSpiral(Node *root)
{
    stack<Node*> s1;
    s1.push(root);
    stack<Node*> s2;
    vector<int> v1;
    while(1){
        if(s1.empty() && s2.empty())
            break;
        while(!s1.empty()){
            Node *tmp=s1.top();
            s1.pop();
            if(tmp!=NULL){
                v1.push_back(tmp->data);
                if(tmp->right)
                    s2.push(tmp->right);
                if(tmp->left)
                    s2.push(tmp->left);
            }
        }
        while(!s2.empty()){
            Node *tmp=s2.top();
            s2.pop();
            if(tmp!=NULL){
                v1.push_back(tmp->data);
                if(tmp->left)
                    s1.push(tmp->left);
                if(tmp->right)
                    s1.push(tmp->right);
            }
        }
    }
   return v1; 
}
int main() {
	Node *root =new Node(1);
    root->left=new Node(2);
    root->right=new Node(3);
    root->left->left=new Node(4);
    root->left->right=new Node(5);
    root->right->left=new Node(6);
    root->right->right=new Node(7);
    root->left->left->left=new Node(8);
    root->left->left->right=new Node(9);
    vector<int> v2=findSpiral(root);
    cout<<"Spiral of a tree:";
    for(int i=0;i<v2.size();i++)
        cout<<v2[i]<<" ";
    return 0;
}


/*
--input--
       1
    2     3
  4   5 6   7
8   9
--output--
Spiral of a tree:1 2 3 7 6 5 4 8 9 
*/
