/*
Question:
This question is asked by Amazon. Given a 2D matrix that represents a gold mine, 
where each cell’s value represents an amount of gold, return the maximum amount of gold you can collect given the following rules:

You may start and stop collecting gold from any position
You can never visit a cell that contains 0 gold
You cannot visit the same cell more than once
From the current cell, you may walk one cell to the left, right, up, or down
Ex: Given the following gold mine…

goldMine = [
    [0,2,0],
    [8,6,3],
    [0,9,0]
],
return 23 (start at 9 and then move to 6 and 8 respectively)

link:https://leetcode.com/problems/path-with-maximum-gold/
*/

class Solution {
public:
    bool safe(int i,int j,vector<vector<int>>& grid){
        int row=grid.size();
        int col=grid[0].size();
        if(i<row && i>=0 && j<col && j>=0)
            return true;
        return false;
    }
    int mxgold(int i,int j,vector<vector<int>>& grid,int mx,int &final_ans){
        int x[4]={-1,1,0,0};
        int y[4]={0,0,-1,1};
        //cout<<i<<" "<<j<<" "<<mx<<"\n";
        if(mx>final_ans)
            final_ans=mx;
        for(int a=0;a<4;a++){
            if(safe(i+x[a],j+y[a],grid) && grid[i+x[a]][j+y[a]]!=0){
                int tmp=grid[i][j];
                grid[i][j]=0;
                mxgold(i+x[a],j+y[a],grid,mx+grid[i+x[a]][j+y[a]],final_ans);
                grid[i][j]=tmp;
            }
        }
        return 0;
    }
    int getMaximumGold(vector<vector<int>>& grid) {
        int ans=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]!=0){
                    mxgold(i,j,grid,grid[i][j],ans);
                    //cout<<ans<<"--\n";
                }
                
            }
        }
        return ans;
    }
};
/*
--input--
[[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]

--output--
28
*/