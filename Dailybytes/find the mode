/*
Question:
Given a binary search tree, return its mode (you may assume the answer is unique). If the tree is empty, return -1. 
Note: the mode is the most frequently occurring value in the tree.

Ex: Given the following tree...

        2
       / \
      1   2
return 2.

Ex: Given the following tree...

         7
        / \
      4     9
     / \   / \
    1   4 8   9
               \
                9  
return 9.

https://leetcode.com/problems/find-mode-in-binary-search-tree/
*/
class Solution {
    vector<int> v;
    TreeNode* prev=NULL;
    int mx=1;
    int tmx=1;
public:
    void findmode1(TreeNode* root){
        if(root==NULL){
            return;
        }
        findmode1(root->left);
        if(prev==NULL){
            prev=root;
        }
        else{
            if(prev!=NULL && root!=NULL){
                if(prev->val==root->val){
                    mx++;
                }
                else{
                    if(tmx<mx){
                        v.clear();
                        tmx=mx;
                        v.push_back(prev->val);
                    }
                    else if(tmx==mx){
                        v.push_back(prev->val);
                    }
                    mx=1;
                }
                
            }
            prev=root;
        }
        findmode1(root->right);
    }
    vector<int> findMode(TreeNode* root) {
        findmode1(root);
        if(tmx<mx){
            v.clear();
            v.push_back(prev->val);
        }
        else if(tmx==mx){
            v.push_back(prev->val);
        }
        
        return v;
    }
};


/*
--input--
[1,null,2,2]

--output--
[2]
*/