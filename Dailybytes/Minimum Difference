/*
Question:
Given a binary search tree, return the minimum difference between any two nodes in the tree.

Ex: Given the following tree...
        2
       / \
      3   1
return 1.
Ex: Given the following tree...
        29
       /  \
     17   50
    /     / \
   1    42  59
return 8.
Ex: Given the following tree...
        2
         \
         100
return 98.

https://leetcode.com/problems/minimum-absolute-difference-in-bst/
*/

class Solution {
public:
    int mn=INT_MAX;
    TreeNode *prev=NULL;
    int getMinimumDifference(TreeNode* root) {
        if(root==NULL)
            return mn;
        getMinimumDifference(root->left);
        if(prev==NULL){
        prev=root;
        }
        else{
            if(root!=NULL && prev!=NULL & mn>abs(prev->val-root->val)){
                //cout<<prev->val<<" "<<root->val<<"\n";
                mn=abs(prev->val-root->val);
            }
             prev=root; 
        }
        getMinimumDifference(root->right);
       
        return mn;
    }
};

/*
--input--
[236,104,701,null,227,null,911]

--output--
9
*/