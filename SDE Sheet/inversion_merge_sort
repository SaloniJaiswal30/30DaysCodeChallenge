/*
Question:
Inversion of Array (Using Merge Sort) 

Practice Link:https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1#
*/

#include <bits/stdc++.h>
using namespace std;

class Solution{
  public:
    long long count=0;
    void merge(long long arr[],long long left,long long mid,long long right){
        long long i=left;
        long long j=mid+1;
        vector<long long> tmp;
        
        while(i<=mid && j<=right){
            if(arr[i]<=arr[j]){
                
                tmp.push_back(arr[i]);
                i++;
            }
            else{
                
                tmp.push_back(arr[j]);
                j++;
                count=count+(mid+1)-i;
            }
        }
        while(i<=mid){
            
            tmp.push_back(arr[i]);
            i++;
        }
        while(j<=right){
            tmp.push_back(arr[j]);
                j++;
        }
        long long k=0;
        for(long long t=left;t<=right;t++){
            arr[t]=tmp[k];
            k++;
        }
    }
    void mergesort(long long arr[],long long left,long long right){
        if(left<right){
            
            long long mid=left+(right-left)/2;
            
            mergesort(arr,left,mid);
            mergesort(arr,mid+1,right);
            
            merge(arr,left,mid,right);
        }
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
         mergesort(arr,0,N-1);
        return count;
    }

};
int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}

/*
--input--
5
2 4 1 3 5

--output--
3
*/