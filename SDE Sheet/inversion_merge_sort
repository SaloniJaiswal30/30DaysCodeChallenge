/*
Question:
Inversion of Array (Using Merge Sort) 

Practice Link:https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1#
*/

#include <bits/stdc++.h>
using namespace std;


class Solution{
  public:
    int count=0;
    int merge(long long arr[],long long tmp[],int left,int mid,int right){
        int i=left;
        int j=mid+1;
        int k=left;
        cout<<left<<" "<<mid<<" "<<right<<"\n";
        
        while(i<=mid && j<=right){
            if(arr[i]<=arr[j]){
                i++;
                tmp[k]=arr[i];
                k++;
            }
            else{
                j++;
                tmp[k]=arr[j];
                k++;
                count=(mid)-i;
            }
        }
        while(i<=mid){
            tmp[k]=arr[i];
            i++;
            k++;
        }
        while(j<=right){
            tmp[k]=arr[j];
            j++;
            k++;
        }
        for(int t=left;t<=right;t++){
            arr[t]=tmp[t];
        }
        return count;
    }
    int mergesort(long long arr[],long long tmp[],int left,int right){
        if(left<right){
            
            int mid=left+(right-left)/2;
            
            mergesort(arr,tmp,left,mid);
            mergesort(arr,tmp,mid+1,right);
            
            count+=merge(arr,tmp,left,mid,right);
        }
        return count;
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
        long long tmp[N];
        return mergesort(arr,tmp,0,N-1);
        //return count;
    }

};

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}


/*
--input--
5
2 4 1 3 5

--output--
3
*/