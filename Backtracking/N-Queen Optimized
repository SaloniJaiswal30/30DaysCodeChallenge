// https://practice.geeksforgeeks.org/problems/n-queen-problem0315/1

#include <bits/stdc++.h>
using namespace std;
class Solution{
public:
    vector<vector<int>> v;
    vector<int> s;
    bool issafe(int i,int j,vector<vector<int>> board){
        int n=board.size();
        int row1,col1;
        if(i>=0 && j>=0 && i<n && j<n){
            for(row1=0;row1<n;row1++){
                if(board[row1][j]==1)
                    return false;
            }
            row1=i-1;
            col1=j-1;
            while(row1>=0 && col1>=0){
                if(board[row1][col1]==1)
                    return false;
                row1--;
                col1--;
            }
            row1=i-1;
            col1=j+1;
            while(row1<n && col1<n && row1>=0 && col1>=0){
                if(board[row1][col1]==1)
                    return false;
                row1--;
                col1++;
            }
        }
        else
            return false;
        return true;
    }
    void number_ways(int n,int row,int col,vector<vector<int>> board){
        if(row==n){
            v.push_back(s);
            return;
        }
        for(int i=0;i<n;i++){
            if(issafe(row,i,board)){
                board[row][i]=1;
                s.push_back(i+1);
                number_ways(n,row+1,i,board);
                board[row][i]=0;
                s.pop_back();
            }
        } 
        
    }
    vector<vector<int>> nQueen(int n) {
        vector<vector<int>> board(n,vector<int>(n,0));
        number_ways(n,0,0,board);
        return v;
        
    }
};

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        
        Solution ob;
        vector<vector<int>> ans = ob.nQueen(n);
        if(ans.size() == 0)
            cout<<-1<<"\n";
        else {
            for(int i = 0;i < ans.size();i++){
                cout<<"[";
                for(int u: ans[i])
                    cout<<u<<" ";
                cout<<"] ";
            }
            cout<<endl;
        }
    }
    return 0;
}  

/*
--input--
4
--output--
[2 4 1 3 ] [3 1 4 2 ] 
*/