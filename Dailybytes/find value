/*
Question:
This question is asked by Google. Given the reference to the root of a binary search tree and a search value, return the reference to the node that contains the value if it exists and null otherwise.
Note: all values in the binary search tree will be unique.

Ex: Given the tree...

        3
       / \
      1   4
and the search value 1 return a reference to the node containing 1.
Ex: Given the tree

        7
       / \
      5   9
         / \ 
        8   10
and the search value 9 return a reference to the node containing 9.
Ex: Given the tree

        8
       / \
      6   9
and the search value 7 return null.

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(n==0)
            return head;
        
        ListNode* tmp=head;
        int size=0;
        while(tmp!=NULL){
            size++;
            tmp=tmp->next;
        }
        tmp=head;
        size=size-n-1;
        if(size==-1)
        {
            return head->next;
        }
        while(tmp!=NULL){
            if(size==0){
                tmp->next=tmp->next->next;
                break;
            }
            tmp=tmp->next;
            size--;
        }
        return head;
    }
};


/*
--input--
[1,2,3,4,5]
2

--output--
[1,2,3,5]
*/