//https://www.hackerearth.com/practice/data-structures/disjoint-data-strutures/basics-of-disjoint-data-structures/practice-problems/algorithm/city-and-campers/
#include<bits/stdc++.h>
using namespace std;
class comp{
    public:
    bool operator()(const pair<int,int>& p, const pair<int,int>& q)
    {
        if(p.second>q.second)
            return true;
        else
            return false;
    }
};
vector<int> group_size;
vector<int> v;
multiset<pair<int,int>,comp> ms;
int parent(int a){
    if(a==v[a])
        return a;
    v[a]=parent(v[a]);
    return v[a];
}
void findset(int x,int y){
    int pa=parent(x);
    int pb=parent(y);
    if(pa==pb)
       return;
    if(group_size[pa]<group_size[pb]){
        swap(pa,pb);
    }
    ms.erase(ms.find(make_pair(pa,group_size[pa])));
    ms.erase(ms.find(make_pair(pb,group_size[pb])));
    v[pb]=pa;
    group_size[pa]=group_size[pa]+group_size[pb];
    ms.insert(make_pair(pa,group_size[pa]));

}

int main()
{
    int n,q;
    cin>>n>>q;
    v.push_back(0);
    group_size.push_back(0);
    for(int i=1;i<n+1;i++){
        v.push_back(i);
        group_size.push_back(1);
        ms.insert(make_pair(i,1));
    }
    for(int i=0;i<q;i++){
        int x,y;
        cin>>x>>y;
        findset(x,y);
        
        int high=(*(ms.begin())).second;
        int low=(*(ms.rbegin())).second;
        cout<<high-low<<"\n";
    }

    return 0;
}

/*
--input1--
2 1
1 2
--output1--
0
*/