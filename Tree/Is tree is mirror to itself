//#include <iostream>
#include <bits/stdc++.h> 
using namespace std;

class Node{
    public:
    int data;
    Node *right;
    Node *left;
    Node(int d){
        data=d;
        right=NULL;
        left=NULL;
    }
};
string left1;
string right1;
Node* isleftsy(struct Node *root){
    if(root==NULL)
        return NULL;
    if(root->left)
    isleftsy(root->left);
    if(root)
    left1=left1+to_string(root->data);
    if(root->right)
    isleftsy(root->right);
}
Node* isrightsy(struct Node *root){
    if(root==NULL)
        return NULL;
    if(root->right)
    isrightsy(root->right);
    if(root)
    right1=right1+to_string(root->data);
    if(root->left)
    isrightsy(root->left);
}
bool isSymmetric(struct Node* root)
{
    left1="";
    right1="";
    if(root!=NULL){
        if(root->left)
        isleftsy(root->left);
        if(root->right)
        isrightsy(root->right);
    }
    if(left1==right1)
        return 1;
    else
        return 0;
}

int main() {
	Node *root =new Node(10);
    root->left=new Node(5);
    root->right=new Node(15);
    root->left->left=new Node(2);
    root->left->right=new Node(4);
    root->right->left=new Node(11);
    root->right->right=new Node(16);
    root->left->left->left=new Node(1);
    root->left->left->right=new Node(3);
    cout<<"Is tree is mirror to itself:"<<isSymmetric(root);
    
    return 0;
}
/*
--input--
           10
       5       15
    2    4  12    16
 1    3
       
--output--

Is tree is mirror to itself:0

*/
