// This will find cycle in graph and connected components in a graph using Disjoint set Union

#include <bits/stdc++.h>
using namespace std;
int arr[100];
int parent(int a){
    if(a==arr[a])
        return a;
    int t=parent(arr[a]);
    return arr[a]=t;
}
int main() {
	vector<pair<int,int>> v1;
	int n ,v;
	cin>>n>>v;
	for(int i=0;i<v;i++){
	    arr[i]=i;
	}
	for(int i=0;i<n;i++){
	    int a,b;
	    cin>>a>>b;
	    v1.push_back(make_pair(a,b));
	    int pa=parent(a);
	    int pb=parent(b);
	    if(pa==pb){
	        cout<<"cycle is present\n";
	    }
	    arr[pb]=pa;
	}
	map<int,int> m;
	for(int i=0;i<v;i++){
	    int pa=parent(i);
	    m[pa]=1;
	}
	cout<<"total number of connected components:"<<m.size();
	return 0;
}  

/*
--input1--
3 3
0 1
1 2
2 0
--output1--
cycle is present
total number of connected components:1

--input2--
5 7
0 1
1 2
3 4
2 4
5 6
--output2--
total number of connected components:2
*/