/*
Question:
Design a class to implement a stack using only a single queue. Your class, QueueStack, should support the following stack methods: push() 
(adding an item), pop() (removing an item), peek() (returning the top value without removing it), and empty() (whether or not the stack is empty).

*/

#include <iostream>
#include<queue>
using namespace std;
class queue_stack{
    queue<int> q;
    
    public:
    void push(int val){
        q.push(val);
        for(int i=0;i<q.size()-1;i++){
            q.push(q.front());
            q.pop();
        }
    }
    void pop(){
        if(!q.empty())
            q.pop();
    }
    void peep(){
        if(!q.empty())
            cout<<q.front()<<"\n";
    }
    bool empty(){
        if(!q.empty())
            return 0;
        return 1;
    }
    
};
int main() {
	queue_stack s;
	s.push(5);
	s.push(6);
	s.pop();
	s.peep();
	s.push(3);
	s.peep();
	s.push(10);
	s.push(22);
	s.pop();
	s.peep();
	cout<<"empty()?:"<<s.empty()<<"\n";
	
	return 0;
}

/*
--output--
5
3
10
empty()?:0
*/