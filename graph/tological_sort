#include <bits/stdc++.h>
using namespace std;

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    int arr[V]={0};
	    vector<int> v1;
	 
	    for(int i=0;i<V;i++){
            for(int j=0;j<adj[i].size();j++){
                arr[adj[i][j]]++;
            }
	    }
	        
	    queue<int> q;
	    for(int i=0;i<V;i++){
	        if(arr[i]==0){
	            q.push(i);
	            
	        }
	    }
	    while(!q.empty()){
	        int tmp=q.front();
	        v1.push_back(tmp);
	        q.pop();
	        for(int i=0;i<adj[tmp].size();i++){
	            if(arr[adj[tmp][i]]!=0)
	               arr[adj[tmp][i]]--;
	            if(arr[adj[tmp][i]]==0){
	                q.push(adj[tmp][i]);
	            }
	        }
	        
	    }
	    return v1;
	}
};

int check(int V, vector <int> &res, vector<int> adj[]) {
    vector<int> map(V, -1);
    for (int i = 0; i < V; i++) {
        map[res[i]] = i;
    }
    for (int i = 0; i < V; i++) {
        for (int v : adj[i]) {
            if (map[i] > map[v]) return 0;
        }
    }
    return 1;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int N, E;
        cin >> E >> N;
        int u, v;

        vector<int> adj[N];

        for (int i = 0; i < E; i++) {
            cin >> u >> v;
            adj[u].push_back(v);
        }
        
        Solution obj;
        vector <int> res = obj.topoSort(N, adj);

        cout << check(N, res, adj) << endl;
    }
    
    return 0;
}  

/*
--input--
3 4
3 0
1 0
2 0
--output--
1

*/