//Link:https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1#

#include<bits/stdc++.h>
using namespace std;

class Solution 
{
    public:
    //Function to detect cycle in an undirected graph.
    void cycle(int V, vector<int>adj[],int i,int p,bool &result,vector<int> &visited){
        
        visited[i]=1;
        for(int j=0;j<adj[i].size();j++)
        {
            if(visited[adj[i][j]]==1 && adj[i][j]!=p)
            {
                result=1;
                return;
            }
            if(visited[adj[i][j]]==0)
                cycle(V,adj,adj[i][j],i,result,visited);
        }
    }
	bool isCycle(int V, vector<int>adj[])
	{
	    bool result=0;
	    vector<int> visited(V,0);
	    for(int i=0;i<V;i++){
            if(!visited[i])
	            cycle(V,adj,i,-1,result,visited);
	    }
	    return result;
	}
};

int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		Solution obj;
		bool ans = obj.isCycle(V, adj);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
} 

/*
--input--
5 5
0 4
1 2
1 4
2 3
3 4
--output--
1

*/