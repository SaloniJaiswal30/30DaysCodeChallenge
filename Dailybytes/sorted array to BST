/*
Question:
Given an array of numbers sorted in ascending order, return a height-balanced binary search tree using every number from the array.
Note: height-balanced meaning that the level of any nodeâ€™s two subtrees should not differ by more than one.

Ex: Given the following nums...

nums = [1, 2, 3] return a reference to the following tree...
       2
      /  \
     1    3
Ex: Given the following nums...

nums = [1, 2, 3, 4, 5, 6] return a reference to the following tree...
        3
       / \
      2   5
      \  / \
       1 4  6

https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/
*/


class Solution {
public:
    TreeNode* arrytotree(vector<int>& nums,TreeNode* root,int start,int end){
        if(start>=end)
            return NULL;
        int mid=start+((end-start)/2);
        root=new TreeNode(nums[mid]);
        root->left=arrytotree(nums,root,start,mid);
        root->right=arrytotree(nums,root,mid+1,end);
        return root;
        
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        TreeNode* root;
        return arrytotree(nums,root,0,nums.size());
       
    }
};

/*
--input--
[-10,-3,0,5,9]

--output--
[0,-3,9,-10,null,5]
*/