/*
Question:
This question is asked by Apple. Given two sorted linked lists, merge them together in ascending order and return a reference to the merged list

Ex: Given the following lists...

list1 = 1->2->3, list2 = 4->5->6->null, return 1->2->3->4->5->6->null
list1 = 1->3->5, list2 = 2->4->6->null, return 1->2->3->4->5->6->null
list1 = 4->4->7, list2 = 1->5->6->null, return 1->4->4->5->6->7->null

https://leetcode.com/problems/merge-two-sorted-lists/
*/

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* head;
        ListNode* sl1;
        if(l1==NULL && l2 !=NULL)
            return l2;
        else if(l1!=NULL && l2 ==NULL)
            return l1;
        else if(l1==NULL && l2 ==NULL)
            return NULL;
        if(l1->val <= l2->val){
            head=l1;
            sl1=l1;
            l1=l1->next;
        }
        else{
            head=l2;
            sl1=l2;
            l2=l2->next;
        }
        
        while(l1!=NULL && l2!=NULL){
            if(l1->val <= l2->val){
                sl1->next=l1;
                sl1=l1;
                l1=l1->next;
            }
            else{
                sl1->next=l2;
                sl1=l2;
                l2=l2->next;
                
            }
        }
        if(l1!=NULL){
            sl1->next=l1;
        }
        if(l2!=NULL){
            sl1->next=l2;
        }
        return head;
    }
};


/*
--input--
[1,2,4]
[1,3,4]
--output--
[1,1,2,3,4,4]
*/