//#include <iostream>
#include <bits/stdc++.h> 
using namespace std;

class Node{
    public:
    int data;
    Node *right;
    Node *left;
    Node(int d){
        data=d;
        right=NULL;
        left=NULL;
    }
};
vector<int> serialize(Node *root) {
    queue<Node*> q1;
    vector<int> v1;
    if(root!=NULL){
        q1.push(root);
        //q1.push(NULL)
        v1.push_back(root->data);
        while(!q1.empty()){
            Node *tmp=q1.front();
            q1.pop();
            if(tmp->left){
                q1.push(tmp->left);
                v1.push_back(tmp->left->data);
            }
            else
            v1.push_back(-1);
            if(tmp->right){
                q1.push(tmp->right);
                v1.push_back(tmp->right->data);
            }
            else
            v1.push_back(-1);
        }
        
    }
    return v1;
    //Your code here
}
/*this function deserializes
 the serialized vector A*/
Node * deSerialize(vector<int> &A)
{
   //Your code here
   if(A.size()>0){
       Node *root=new Node(A[0]);
       queue<Node*> q;
       q.push(root);
       for(int i=1;i<A.size();i++){
          if(!q.empty()){
              Node *tmp=q.front();
              q.pop();
              if(A[i]!=-1){
                tmp->left=new Node(A[i]);
                q.push(tmp->left);
              }
              i++;
              if(A[i]!=-1){
                tmp->right=new Node(A[i]);
                q.push(tmp->right);
              }
          }
       }
       return root;
   }
   else
    return NULL;
}
void inorder(Node *root){
    if(root==NULL)\
        return;
    if(root->left)
        inorder(root->left);
    cout<<root->data<<" ";
    if(root->right)
        inorder(root->right);
}
int main() {
	Node *root =new Node(10);
    root->left=new Node(5);
    root->right=new Node(15);
    root->left->left=new Node(2);
    root->left->right=new Node(4);
    root->right->left=new Node(12);
    root->right->right=new Node(16);
    root->left->left->left=new Node(1);
    root->left->left->right=new Node(3);
    vector<int> v=serialize(root);
    Node *n=deSerialize(v);
    inorder(n);
    return 0;
}


/*
--input--
           10
       5       15
    2    4  12    16
 1    3
       
--output--
1 2 3 5 4 10 12 15 16 

*/
