/*
Question:
This question is asked by Facebook. Given an integer N, where N represents the number of pairs of parentheses (i.e. ”(“ and ”)”) you are given, return a list containing all possible well-formed parentheses you can create.

Ex: Given the following value of N…

N = 3, 
return [  
    "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
*/

class Solution {
public:
    void generate(int open,int close,string output,vector<string> &s,int n){
        if(output.length()==n*2){
            s.push_back(output);
            return;
        }
        if(open<n){
            string output1=output;
            output1.push_back('(');
            generate(open+1,close,output1,s,n);
        }
        if(open>close){
            output.push_back(')');
            generate(open,close+1,output,s,n);
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> s;
        string output="";
        generate(0,0,output,s,n);
        return s;
    }
};

/*
--input--
3

--output--
["((()))","(()())","(())()","()(())","()()()"]
*/