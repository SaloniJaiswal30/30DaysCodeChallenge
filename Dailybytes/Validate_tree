/*
Question:
Given a binary tree, containing unique values, determine if it is a valid binary search tree.
Note: the invariants of a binary search tree (in our case) are all values to the left of a given 
node are less than the current node’s value, all values to the right of a given node are greater than the current node’s 
value, and both the left and right subtrees of a given node must also be binary search trees.

Ex: Given the following binary tree…

   1
 /   \
2     3
return false.
Ex: Given the following tree…

   2
 /   \
1     3
return true.

link:https://leetcode.com/problems/validate-binary-search-tree/
*/

class Solution {
public:
    bool ans=true;
    bool validate(TreeNode* root,long long int mn,long long int mx){
        if(root==NULL)
            return true;
        if((root->val>=mx || root->val<=mn)){
            cout<<"-\n";
            return false;
        }
        if((root->left!=NULL && validate(root->left,mn,root->val)==false) || (root->right!=NULL && validate(root->right,root->val,mx)==false))
            return false;
        else
            return true;
    }
    bool isValidBST(TreeNode* root) {
        if(root==NULL )
            return true;
        return validate(root,LLONG_MIN,LLONG_MAX);
    }
};
/*
--input--
[2,1,3]

--output--
true
*/